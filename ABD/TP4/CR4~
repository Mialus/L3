Wargnier Pierre 
TP2C 
21/01 
N°3

version :
mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.2
psql (PostgreSQL) 9.4.0
pgadmin : 1.2.0.0
mysql-workbench : 5.2.40

1) gestion des visites médicales dans un hopital

	1.1)
		\i Hopital_creation.sql
		\i Hopital_insertion.sql

	1.2)

			CREATE VIEW medPrix AS
			SELECT LIBELLE
			FROM MEDICAMENT,PRESCRIPTION
			WHERE PRESCRIPTION.CODEMEDICAMENT=MEDICAMENT.CODEMEDICAMENT
			GROUP BY LIBELLE
			HAVING sum(PRIX) >= ALL(SELECT SUM(PRIX) FROM MEDICAMENT,PRESCRIPTION
			WHERE PRESCRIPTION.CODEMEDICAMENT=MEDICAMENT.CODEMEDICAMENT
			GROUP BY MEDICAMENT.CODEMEDICAMENT);

		1.2.1)

			SELECT PATIENT.NUMSECUPATIENT,NOM,PRENOM
			FROM PATIENT,VISITE,PRESCRIPTION
			WHERE VISITE.CODEVISITE=PRESCRIPTION.CODEVISITE
			AND VISITE.NUMSECUPATIENT=PATIENT.NUMSECUPATIENT
			GROUP BY PATIENT.NUMSECUPATIENT,NOM,PRENOM
			HAVINGERVICE.CATEGORIE COUNT(PRESCRIPTION.CODEMEDICAMENT) BETWEEN 1 AND 5;

		1.2.2)

			SELECT DISTINCT PATIENT.NOM
			FROM PATIENT,VISITE,MEDECIN
			WHERE VISITE.MATRICULEMEDECIN=MEDECIN.MATRICULEMEDECIN
			AND VISITE.NUMSECUPATIENT=PATIENT.NUMSECUPATIENT
			AND MEDECIN.NOM='HOUSE'
			GROUP BY PATIENT.NOM;

			CREATE VIEW simple AS
			SELECT PATIENT.NUMSECUPATIENT,PATIENT.NOM AS N1,PATIENT.PRENOM,MEDECIN.NOM AS N2,PRESCRIPTION.CODEMEDICAMENT
			FROM PATIENT,VISITE,PRESCRIPTION,MEDECIN
			WHERE VISITE.CODEVISITE=PRESCRIPTION.CODEVISITE
			AND VISITE.MATRICULEMEDECIN=MEDECIN.MATRICULEMEDECIN
			AND VISITE.NUMSECUPATIENT=PATIENT.NUMSECUPATIENT;

	1.3)
		1)
CREATE OR REPLACE FUNCTION calculSalaire(m INT)
RETURNS FLOAT AS $$
DECLARE ancien INT;
brute FLOAT;
net FLOAT;
minute INT;
durvi FLOAT;
ecarvi FLOAT;
BEGIN
SELECT * FROM MEDECIN,SERVICE,VISITE
WHERE MEDECIN.MATRICULEMEDECIN=m
AND MEDECIN.CODESERVICE=SERVICE.CODESERVICE
AND VISITE.MATRICULEMEDECIN=MEDECIN.MATRICULEMEDECIN;
ancien=(DATE_PART(('year', end) - DATE_PART('year', start))*12+ (DATE_PART('month', end) - DATE_PART('month', start));
minute=sum(VISITE.DUREE);
CASE CATEGORIE
WHEN 'A' THEN
CASE MEDECIN.GRADE
WHEN 'Chef de service' THEN 
brute=(4500*1)+(ancien*12)+minute;
WHEN 'Interne' THEN
brute=(1800*1)+(ancien*12)+minute;
WHEN 'PH' THEN
brute=(2500*1)+(ancien*12)+minute;
WHEN 'Externe' THEN
brute=(1200*1)+(ancien*12)+minute;
END CASE;
WHEN 'B' THEN
CASE MEDECIN.GRADE
WHEN 'Chef de service' THEN
brute=(4500*1.5)+(ancien*12)+minute;
WHEN 'Interne' THEN
brute=(1800*1.5)+(ancien*12)+minute;
WHEN 'PH' THEN
brute=(2500*1.5)+(ancien*12)+minute;
WHEN 'Externe' THEN
brute=(1200*1.5)+(ancien*12)+minute;
END CASE;
WHEN 'C' THEN
CASE MEDECIN.GRADE
WHEN 'Chef de service' THEN
brute=(4500*1.8)+(ancien*12)+minute;
WHEN 'Interne' THEN
brute=(1800*1.8)+(ancien*12)+minute;
WHEN 'PH' THEN
brute=(2500*1.8)+(ancien*12)+minute;
WHEN 'Externe' THEN
brute=(1200*1.8)+(ancien*12)+minute;
END CASE;
END CASE;
IF ((AVG(VISITE.DUREE)<15) OR (STDEV(VISITE.DUREE))>30) THEN
net=brute-500;
END IF;
IF ((AVG(VISITE.DUREE)>25) AND (STDEV(VISITE.DUREE))<18) THEN
net=net+300;
END IF;
net=net*0.81;
RETURN net;
END
$$ LANGUAGE plpgsql;
	




