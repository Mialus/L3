Wargnier Pierre 
TP2C 
21/01 
N°1

version :
mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.2
psql (PostgreSQL) 9.4.0




2 Prise en main de l’environnement PostgreSQL
	
	2.1)

		2.1.1) 
			On déclare les variables d'environnements avec :

			export PGSQL_DIR=/tmp/pgsql
			export PGSQL_PORT=5432 # Port par défaut pour les systèmes PostgreSQL

			Et on teste que le port est libre et que le dossier n'existe pas avec la commande :
			
			netstat -lnt | grep :$PGSQL_PORT


			la commande doit retourner ce qui utilise le port donné dans PGSQL si il est utilisé.

		2.1.2)

			On prépare le dossier qui contiendra les données du système avec la commande :

			initdb -D $PGSQL_DIR/data
			
			A l'exécution de cette commande, on configure le dossier avec les donnée nécéssaire, on précise l'encodage par défaut,  bref, on prépare la database.

			le fait que /tmp est vidé à chaque démarrage implique qu'il faudra refaire les commande à chaque démarrage, car le répertoire aura été supprimé.

		2.1.3) 
		
			On lance le serveur en tâche de fond avec la commande :

			postgres -k $PGSQL_DIR -D $PGSQL_DIR/data -p $PGSQL_PORT > $PGSQL_DIR/logfile 2>&1 &

			on peut vérifier que le serveur fonctionne correctement en retapant la commande :
			netstat -lnt | grep :$PGSQL_PORT

			qui nous indique que le port est utilisé.

		2.1.4)

			On arrête le serveur avec la commande :
		
			pg_ctl stop -D $PGSQL_DIR/data

	2.2)
	
		2.2.1)
			On se connecte au serveur avec la commande :

			psql -h $PGSQL_DIR -p $PGSQL_PORT postgres

		2.2.2)
			CREATE DATABASE temp; crée la database temp.
			SELECT datname FROM pg_database; retourne les noms des databases de pg_database.
			\l retourne la liste des databases avec leur information
			\c temp nous connecte à la database temp.
			CREATE TABLE T (A INT); créer la table T 
			\dt affiche la liste des relations
			\d+ T affiche la Table "public.t"
			\q nous déconnecte du serveur.

		
			pour insérer une valeur dans la table T:
			INSERT INTO T VALUES(24); 
			Pour afficher la table :
			SELECT A FROM T;

		2.2.3)
			
			On met les commandes :

			INSERT INTO T VALUES(24);
			SELECT A FROM T;
					
			Dans le fichier batch.sql puis on utilise la commande :

			psql -h $PGSQL_DIR -p $PGSQL_PORT postgres < batch.sql > pgsql.out
			qui utilise les commandes de batch et met le  résultat dans  pgsql.out, qui contient :

			INSERT 0 1
			 a  
			----
			 24
			 24
			(2 rows)
			
			L'affichage avec \i batch.sql est le même que dans pgsql.out e t qu'avec pgsql en mode interactif.

	2.3)
		
		server Groups : regroupe un ensemble de serveur
		Serveur: Un serveur
		test: nom du serveur
		databases : regroupe les database
		tablespaces : regroupe les tables.
		Group Roles : regroupe les groupes d'utilisateur et leur role
		Login Roles : regroupe les utilisateurs et leur role

		Les raccourcies pour exécute les requêtes sql sont F5 et ctrl+e
		Le raccourcie pour commenté est ctrl+k
		
		la requête est :
		
		SELECT * FROM T
		RIGHT JOIN U ON U.B = 24
		ORDER BY B

	3.1)
		3.1.1)
		
			On déclare les variables d'environnements avec :

			export MYSQL_DIR=/tmp/mysql
			export MYSQL_PORT=3306

		3.1.2)
		
			On prépare le dossier qui contiendra les données de la base :

			mysql_install_db --user=$USER --datadir=$MYSQL_DIR/data

			

		3.1.3)
			On crée le fichier de configuration :

			cat > $MYSQL_DIR/my.cnf << EOF
			[client]
			port=$MYSQL_PORT
			socket=$MYSQL_DIR/sock.$USER
			[mysqld]
			port=$MYSQL_PORT
			socket=$MYSQL_DIR/sock.$USER
			datadir=$MYSQL_DIR/data
			EOF

		3.1.4)
			on lance le serveur avec la commande :

			/usr/sbin/mysqld --defaults-file=$MYSQL_DIR/my.cnf &

		3.2.1)

			On se connecte au serveur avec la commande :

			mysql --defaults-file=$MYSQL_DIR/my.cnf -u root

		3.2.2)

			CREATE DATABASE temp; crée la database temp
			SHOW DATABASES; affiche les databases
			USE temp; on s eplace dans cette base de donnée

			On crée une table avec :

			CREATE TABLE T (A INT);

			on ajoute une valeur dans la table et on affiche avec :

			INSERT INTO T VALUES(24);
			SELECT A FROM T;

		3.2.3)
			dans mysql interactif :
			+------+
			| A    |
			+------+
			|   24 |
			+------+
			dans mysql.out :
			A
			24
			24

		3.3.1)

			On peut désactiver l'auto-commit en cliquer sur l'icone pour la décocher

			Le raccourcie est ctrl+maj+entrée

		3.3.2)
			On crée les tables qu'on lon veut utilisé, puis on crée un diagramme EER où l'on insert les tables précédemment créée, puis, grâce à l'outil de création de lien, on crée un lien 1 1 entre les deux tables. 

			SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
			SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
			SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL';

			CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci ;
			USE `mydb` ;

			-- -----------------------------------------------------
			-- Table `mydb`.`table2`
			-- -----------------------------------------------------
			DROP TABLE IF EXISTS `mydb`.`table2` ;

			CREATE  TABLE IF NOT EXISTS `mydb`.`table2` (
			  `idtable2` INT NOT NULL ,
			  PRIMARY KEY (`idtable2`) )
			ENGINE = InnoDB;


			-- -----------------------------------------------------
			-- Table `mydb`.`table1`
			-- -----------------------------------------------------
			DROP TABLE IF EXISTS `mydb`.`table1` ;

			CREATE  TABLE IF NOT EXISTS `mydb`.`table1` (
			  `idtable1` INT NOT NULL ,
			  `table2_idtable2` INT NOT NULL ,
			  PRIMARY KEY (`idtable1`) ,
			  INDEX `fk_table1_table2` (`table2_idtable2` ASC) ,
			  CONSTRAINT `fk_table1_table2`
			    FOREIGN KEY (`table2_idtable2` )
			    REFERENCES `mydb`.`table2` (`idtable2` )
			    ON DELETE NO ACTION
			    ON UPDATE NO ACTION)
			ENGINE = InnoDB;



			SET SQL_MODE=@OLD_SQL_MODE;
			SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
			SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
	

		3.3.3)

			il ya 4 connections ouverte avec les outils de developpement sql, et plus que 2 lorsqu'ils sont fermés.
