#include <stdlib.h>
#include <stdio.h>

typedef struct s_liste{
	int state;
	struct s_liste* suiv;
} liste;

typedef struct {
	int size;
	int sizealpha;
	int* initial;
	int* final;
	liste*** trans;
} automate;

void ajouteListe(liste** l, int q)
{
	liste* ptl;
	liste* tmp;
	pt1=*l;
	if(!ptl)
	{
		ptl=(liste*) malloc(sizeof(liste));
		ptl->state=q;
		ptl->suiv=NULL;
		return;
	}
	if(ptl->state == q)
	{ return;
	}
	if(q<ptl->state)
	{
		tmp=*l;
		*l=(liste*) malloc-sizeof(liste));
		(*l)->state=q;
		(*l)->suiv=tmp;
		return;
	}

	while(ptl->suiv && ptl->suiv->state<q)
	{
	ptl=ptl->suiv;
	}
	if(!ptl->suiv)
	{
		ptl->suiv=(liste*) malloc(sizeof(liste));
		ptl=ptl->suiv;
		ptl=state=q;
		plt->suiv=NULL;
		return;
	}
	if(ptl->suiv->state==q){return;}
	tmp=ptl->suiv;
	ptl->suiv=(liste*malloc(sizeof(liste));
	ptl=ptl->suiv;
	ptl->state=q;
	ptl->suiv=tmp;
}

void ajouteTransition(automate* A, int depart, int arrivee, char etiquette)
{
ajouteListe(A.trans[depart].suiv.state,arrivee);

}

int main()
{

}
